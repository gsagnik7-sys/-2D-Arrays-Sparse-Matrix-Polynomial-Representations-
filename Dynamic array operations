Python-->
def dynamicArray(n, queries):
    arr = [[] for _ in range(n)]
    lastAnswer = 0
    ans = []
    for t, x, y in queries:
        idx = (x ^ lastAnswer) % n
        if t == 1:
            arr[idx].append(y)
        else:
            lastAnswer = arr[idx][y % len(arr[idx])]
            ans.append(lastAnswer)
    return ans

c-->
int* dynamicArray(int n, int queries_rows, int queries_columns, int** queries, int* result_count) {
    int** arr = malloc(n * sizeof(int*));
    int* sizes = calloc(n, sizeof(int));
    int* capacity = calloc(n, sizeof(int));
    int lastAnswer = 0;
    int* ans = malloc(queries_rows * sizeof(int));
    int ansCount = 0;

    for (int i = 0; i < n; i++) {
        arr[i] = NULL;
        capacity[i] = 0;
    }

    for (int i = 0; i < queries_rows; i++) {
        int t = queries[i][0];
        int x = queries[i][1];
        int y = queries[i][2];
        int idx = (x ^ lastAnswer) % n;

        if (t == 1) {
            if (sizes[idx] == capacity[idx]) {
                capacity[idx] = (capacity[idx] == 0) ? 2 : capacity[idx] * 2;
                arr[idx] = realloc(arr[idx], capacity[idx] * sizeof(int));
            }
            arr[idx][sizes[idx]++] = y;
        } else if (t == 2) {
            lastAnswer = arr[idx][y % sizes[idx]];
            ans[ansCount++] = lastAnswer;
        }
    }

    *result_count = ansCount;

    for (int i = 0; i < n; i++) {
        free(arr[i]);
    }
    free(arr);
    free(sizes);
    free(capacity);

    return ans;
}
